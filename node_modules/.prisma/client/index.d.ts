import {
  DMMF,
  DMMFClass,
  Engine,
  PrismaClientKnownRequestError,
  PrismaClientUnknownRequestError,
  PrismaClientRustPanicError,
  PrismaClientInitializationError,
  PrismaClientValidationError,
  sqltag as sql,
  empty,
  join,
  raw,
} from '@prisma/client/runtime';

export { PrismaClientKnownRequestError }
export { PrismaClientUnknownRequestError }
export { PrismaClientRustPanicError }
export { PrismaClientInitializationError }
export { PrismaClientValidationError }

/**
 * Re-export of sql-template-tag
 */
export { sql, empty, join, raw }

/**
 * Prisma Client JS version: 2.0.0
 * Query Engine version: de2bc1cbdb5561ad73d2f08463fa2eec48993f56
 */
export declare type PrismaVersion = {
  client: string
}

export declare const prismaVersion: PrismaVersion 

/**
 * Utility Types
 */

/**
 * From https://github.com/sindresorhus/type-fest/
 * Matches a JSON object.
 * This type can be useful to enforce some input to be JSON-compatible or as a super-type to be extended from. 
 */
declare type JsonObject = {[Key in string]?: JsonValue}
 
/**
 * From https://github.com/sindresorhus/type-fest/
 * Matches a JSON array.
 */
declare interface JsonArray extends Array<JsonValue> {}
 
/**
 * From https://github.com/sindresorhus/type-fest/
 * Matches any valid JSON value.
 */
declare type JsonValue = string | number | boolean | null | JsonObject | JsonArray

declare type SelectAndInclude = {
  select: any
  include: any
}

declare type HasSelect = {
  select: any
}

declare type HasInclude = {
  include: any
}

declare type CheckSelect<T, S, U> = T extends SelectAndInclude
  ? 'Please either choose `select` or `include`'
  : T extends HasSelect
  ? U
  : T extends HasInclude
  ? U
  : S

/**
 * Get the type of the value, that the Promise holds.
 */
export declare type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

/**
 * Get the return type of a function which returns a Promise.
 */
export declare type PromiseReturnType<T extends (...args: any) => Promise<any>> = PromiseType<ReturnType<T>>


export declare type Enumerable<T> = T | Array<T>;

export declare type TrueKeys<T> = {
  [key in keyof T]: T[key] extends false | undefined | null ? never : key
}[keyof T]

/**
 * Subset
 * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
 */
export declare type Subset<T, U> = {
  [key in keyof T]: key extends keyof U ? T[key] : never;
};
declare class PrismaClientFetcher {
  private readonly prisma;
  private readonly debug;
  private readonly hooks?;
  constructor(prisma: PrismaClient<any, any>, debug?: boolean, hooks?: Hooks | undefined);
  request<T>(document: any, dataPath?: string[], rootField?: string, typeName?: string, isList?: boolean, callsite?: string, collectTimestamps?: any): Promise<T>;
  sanitizeMessage(message: string): string;
  protected unpack(document: any, data: any, path: string[], rootField?: string, isList?: boolean): any;
}


/**
 * Client
**/


export type Datasources = {
  db?: string
}

export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'

export interface PrismaClientOptions {
  /**
   * Overwrites the datasource url from your prisma.schema file
   */
  datasources?: Datasources

  /**
   * @default "colorless"
   */
  errorFormat?: ErrorFormat

  /**
   * @example
   * ```
   * // Defaults to stdout
   * log: ['query', 'info', 'warn', 'error']
   * 
   * // Emit as events
   * log: [
   *  { emit: 'stdout', level: 'query' },
   *  { emit: 'stdout', level: 'info' },
   *  { emit: 'stdout', level: 'warn' }
   *  { emit: 'stdout', level: 'error' }
   * ]
   * ```
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
   */
  log?: Array<LogLevel | LogDefinition>

  /**
   * You probably don't want to use this. `__internal` is used by internal tooling.
   */
  __internal?: {
    debug?: boolean
    hooks?: Hooks
    engine?: {
      cwd?: string
      binaryPath?: string
    }
    measurePerformance?: boolean
  }
}

export type Hooks = {
  beforeRequest?: (options: {query: string, path: string[], rootField?: string, typeName?: string, document: any}) => any
}

/* Types for Logging */
export type LogLevel = 'info' | 'query' | 'warn' | 'error'
export type LogDefinition = {
  level: LogLevel
  emit: 'stdout' | 'event'
}

export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
export type GetEvents<T extends Array<LogLevel | LogDefinition>> = GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]> 

export type QueryEvent = {
  timestamp: Date
  query: string
  params: string
  duration: number
  target: string
}

export type LogEvent = {
  timestamp: Date
  message: string
  target: string
}
/* End Types for Logging */

// tested in getLogLevel.test.ts
export declare function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

/**
 * ##  Prisma Client ʲˢ
 * 
 * Type-safe database client for TypeScript & Node.js (ORM replacement)
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Menus
 * const menus = await prisma.menu.findMany()
 * ```
 *
 * 
 * Read more in our [docs](https://github.com/prisma/prisma/blob/master/docs/prisma-client-js/api.md).
 */
export declare class PrismaClient<
  T extends PrismaClientOptions = PrismaClientOptions,
  U = keyof T extends 'log' ? T['log'] extends Array<LogLevel | LogDefinition> ? GetEvents<T['log']> : never : never
> {
  /**
   * @private
   */
  private fetcher;
  /**
   * @private
   */
  private readonly dmmf;
  /**
   * @private
   */
  private connectionPromise?;
  /**
   * @private
   */
  private disconnectionPromise?;
  /**
   * @private
   */
  private readonly engineConfig;
  /**
   * @private
   */
  private readonly measurePerformance;
  /**
   * @private
   */
  private engine: Engine;
  /**
   * @private
   */
  private errorFormat: ErrorFormat;

  /**
   * ##  Prisma Client ʲˢ
   * 
   * Type-safe database client for TypeScript & Node.js (ORM replacement)
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Menus
   * const menus = await prisma.menu.findMany()
   * ```
   *
   * 
   * Read more in our [docs](https://github.com/prisma/prisma/blob/master/docs/prisma-client-js/api.md).
   */
  constructor(optionsArg?: T);
  on<V extends U>(eventType: V, callback: (event: V extends 'query' ? QueryEvent : LogEvent) => void): void;
  /**
   * Connect with the database
   */
  connect(): Promise<void>;
  /**
   * @private
   */
  private runDisconnect;
  /**
   * Disconnect from the database
   */
  disconnect(): Promise<any>;

  /**
   * Executes a raw query and returns the number of affected rows
   * @example
   * ```
   * // With parameters use prisma.executeRaw``, values will be escaped automatically
   * const result = await prisma.executeRaw`UPDATE User SET cool = ${true} WHERE id = ${1};`
   * // Or
   * const result = await prisma.executeRaw('UPDATE User SET cool = $1 WHERE id = $2 ;', true, 1)
  * ```
  * 
  * Read more in our [docs](https://github.com/prisma/prisma/blob/master/docs/prisma-client-js/api.md#raw-database-access).
  */
  executeRaw<T = any>(query: string | TemplateStringsArray, ...values: any[]): Promise<number>;

  /**
   * Performs a raw query and returns the SELECT data
   * @example
   * ```
   * // With parameters use prisma.queryRaw``, values will be escaped automatically
   * const result = await prisma.queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'ema.il'};`
   * // Or
   * const result = await prisma.queryRaw('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'ema.il')
  * ```
  * 
  * Read more in our [docs](https://github.com/prisma/prisma/blob/master/docs/prisma-client-js/api.md#raw-database-access).
  */
  queryRaw<T = any>(query: string | TemplateStringsArray, ...values: any[]): Promise<T>;

  /**
   * `prisma.menu`: Exposes CRUD operations for the **menu** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Menus
    * const menus = await prisma.menu.findMany()
    * ```
    */
  get menu(): menuDelegate;

  /**
   * `prisma.search_sentence`: Exposes CRUD operations for the **search_sentence** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Search_sentences
    * const search_sentences = await prisma.search_sentence.findMany()
    * ```
    */
  get search_sentence(): search_sentenceDelegate;

  /**
   * `prisma.shop`: Exposes CRUD operations for the **shop** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Shops
    * const shops = await prisma.shop.findMany()
    * ```
    */
  get shop(): shopDelegate;

  /**
   * `prisma.shop_menu`: Exposes CRUD operations for the **shop_menu** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Shop_menus
    * const shop_menus = await prisma.shop_menu.findMany()
    * ```
    */
  get shop_menu(): shop_menuDelegate;

  /**
   * `prisma.user`: Exposes CRUD operations for the **User** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Users
    * const users = await prisma.user.findMany()
    * ```
    */
  get user(): UserDelegate;
}



/**
 * Enums
 */

// Based on
// https://github.com/microsoft/TypeScript/issues/3192#issuecomment-261720275

export declare const OrderByArg: {
  asc: 'asc',
  desc: 'desc'
};

export declare type OrderByArg = (typeof OrderByArg)[keyof typeof OrderByArg]



/**
 * Model menu
 */

export type menu = {
  idmenu: number
  menu_name: string
}

export type menuSelect = {
  idmenu?: boolean
  menu_name?: boolean
  shop_menu?: boolean | FindManyshop_menuArgs
}

export type menuInclude = {
  shop_menu?: boolean | FindManyshop_menuArgs
}

export type menuGetPayload<
  S extends boolean | null | undefined | menuArgs,
  U = keyof S
> = S extends true
  ? menu
  : S extends undefined
  ? never
  : S extends menuArgs | FindManymenuArgs
  ? 'include' extends U
    ? menu  & {
      [P in TrueKeys<S['include']>]:
      P extends 'shop_menu'
      ? Array<shop_menuGetPayload<S['include'][P]>> : never
    }
  : 'select' extends U
    ? {
      [P in TrueKeys<S['select']>]:P extends keyof menu ? menu[P]
: 
      P extends 'shop_menu'
      ? Array<shop_menuGetPayload<S['select'][P]>> : never
    }
  : menu
: menu


export interface menuDelegate {
  /**
   * Find zero or one Menu.
   * @param {FindOnemenuArgs} args - Arguments to find a Menu
   * @example
   * // Get one Menu
   * const menu = await prisma.menu.findOne({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
  **/
  findOne<T extends FindOnemenuArgs>(
    args: Subset<T, FindOnemenuArgs>
  ): CheckSelect<T, menuClient<menu | null>, menuClient<menuGetPayload<T> | null>>
  /**
   * Find zero or more Menus.
   * @param {FindManymenuArgs=} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all Menus
   * const menus = await prisma.menu.findMany()
   * 
   * // Get first 10 Menus
   * const menus = await prisma.menu.findMany({ take: 10 })
   * 
   * // Only select the `idmenu`
   * const menuWithIdmenuOnly = await prisma.menu.findMany({ select: { idmenu: true } })
   * 
  **/
  findMany<T extends FindManymenuArgs>(
    args?: Subset<T, FindManymenuArgs>
  ): CheckSelect<T, Promise<Array<menu>>, Promise<Array<menuGetPayload<T>>>>
  /**
   * Create a Menu.
   * @param {menuCreateArgs} args - Arguments to create a Menu.
   * @example
   * // Create one Menu
   * const user = await prisma.menu.create({
   *   data: {
   *     // ... data to create a Menu
   *   }
   * })
   * 
  **/
  create<T extends menuCreateArgs>(
    args: Subset<T, menuCreateArgs>
  ): CheckSelect<T, menuClient<menu>, menuClient<menuGetPayload<T>>>
  /**
   * Delete a Menu.
   * @param {menuDeleteArgs} args - Arguments to delete one Menu.
   * @example
   * // Delete one Menu
   * const user = await prisma.menu.delete({
   *   where: {
   *     // ... filter to delete one Menu
   *   }
   * })
   * 
  **/
  delete<T extends menuDeleteArgs>(
    args: Subset<T, menuDeleteArgs>
  ): CheckSelect<T, menuClient<menu>, menuClient<menuGetPayload<T>>>
  /**
   * Update one Menu.
   * @param {menuUpdateArgs} args - Arguments to update one Menu.
   * @example
   * // Update one Menu
   * const menu = await prisma.menu.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
  **/
  update<T extends menuUpdateArgs>(
    args: Subset<T, menuUpdateArgs>
  ): CheckSelect<T, menuClient<menu>, menuClient<menuGetPayload<T>>>
  /**
   * Delete zero or more Menus.
   * @param {menuDeleteManyArgs} args - Arguments to filter Menus to delete.
   * @example
   * // Delete a few Menus
   * const { count } = await prisma.menu.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
  **/
  deleteMany<T extends menuDeleteManyArgs>(
    args: Subset<T, menuDeleteManyArgs>
  ): Promise<BatchPayload>
  /**
   * Update zero or more Menus.
   * @param {menuUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many Menus
   * const menu = await prisma.menu.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
  **/
  updateMany<T extends menuUpdateManyArgs>(
    args: Subset<T, menuUpdateManyArgs>
  ): Promise<BatchPayload>
  /**
   * Create or update one Menu.
   * @param {menuUpsertArgs} args - Arguments to update or create a Menu.
   * @example
   * // Update or create a Menu
   * const menu = await prisma.menu.upsert({
   *   create: {
   *     // ... data to create a Menu
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the Menu we want to update
   *   }
   * })
  **/
  upsert<T extends menuUpsertArgs>(
    args: Subset<T, menuUpsertArgs>
  ): CheckSelect<T, menuClient<menu>, menuClient<menuGetPayload<T>>>
  /**
   * 
   */
  count(args?: Omit<FindManymenuArgs, 'select' | 'include'>): Promise<number>
}

export declare class menuClient<T> implements Promise<T> {
  private readonly _dmmf;
  private readonly _fetcher;
  private readonly _queryType;
  private readonly _rootField;
  private readonly _clientMethod;
  private readonly _args;
  private readonly _dataPath;
  private readonly _errorFormat;
  private readonly _measurePerformance?;
  private _isList;
  private _callsite;
  private _requestPromise?;
  private _collectTimestamps?;
  constructor(_dmmf: DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
  readonly [Symbol.toStringTag]: 'PrismaClientPromise';

  shop_menu<T extends FindManyshop_menuArgs = {}>(args?: Subset<T, FindManyshop_menuArgs>): CheckSelect<T, Promise<Array<shop_menu>>, Promise<Array<shop_menuGetPayload<T>>>>;

  private get _document();
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | Promise<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | Promise<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | Promise<TResult>) | undefined | null): Promise<T | TResult>;
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): Promise<T>;
}

// Custom InputTypes

/**
 * menu findOne
 */
export type FindOnemenuArgs = {
  /**
   * Select specific fields to fetch from the menu
  **/
  select?: menuSelect | null
  /**
   * Choose, which related nodes to fetch as well.
  **/
  include?: menuInclude | null
  /**
   * Filter, which menu to fetch.
  **/
  where: menuWhereUniqueInput
}


/**
 * menu findMany
 */
export type FindManymenuArgs = {
  /**
   * Select specific fields to fetch from the menu
  **/
  select?: menuSelect | null
  /**
   * Choose, which related nodes to fetch as well.
  **/
  include?: menuInclude | null
  /**
   * Filter, which menus to fetch.
  **/
  where?: menuWhereInput
  /**
   * Determine the order of the menus to fetch.
  **/
  orderBy?: menuOrderByInput
  /**
   * Sets the position for listing menus.
  **/
  cursor?: menuWhereUniqueInput
  /**
   * The number of menus to fetch. If negative number, it will take menus before the `cursor`.
  **/
  take?: number
  /**
   * Skip the first `n` menus.
  **/
  skip?: number
}


/**
 * menu create
 */
export type menuCreateArgs = {
  /**
   * Select specific fields to fetch from the menu
  **/
  select?: menuSelect | null
  /**
   * Choose, which related nodes to fetch as well.
  **/
  include?: menuInclude | null
  /**
   * The data needed to create a menu.
  **/
  data: menuCreateInput
}


/**
 * menu update
 */
export type menuUpdateArgs = {
  /**
   * Select specific fields to fetch from the menu
  **/
  select?: menuSelect | null
  /**
   * Choose, which related nodes to fetch as well.
  **/
  include?: menuInclude | null
  /**
   * The data needed to update a menu.
  **/
  data: menuUpdateInput
  /**
   * Choose, which menu to update.
  **/
  where: menuWhereUniqueInput
}


/**
 * menu updateMany
 */
export type menuUpdateManyArgs = {
  data: menuUpdateManyMutationInput
  where?: menuWhereInput
}


/**
 * menu upsert
 */
export type menuUpsertArgs = {
  /**
   * Select specific fields to fetch from the menu
  **/
  select?: menuSelect | null
  /**
   * Choose, which related nodes to fetch as well.
  **/
  include?: menuInclude | null
  /**
   * The filter to search for the menu to update in case it exists.
  **/
  where: menuWhereUniqueInput
  /**
   * In case the menu found by the `where` argument doesn't exist, create a new menu with this data.
  **/
  create: menuCreateInput
  /**
   * In case the menu was found with the provided `where` argument, update it with this data.
  **/
  update: menuUpdateInput
}


/**
 * menu delete
 */
export type menuDeleteArgs = {
  /**
   * Select specific fields to fetch from the menu
  **/
  select?: menuSelect | null
  /**
   * Choose, which related nodes to fetch as well.
  **/
  include?: menuInclude | null
  /**
   * Filter which menu to delete.
  **/
  where: menuWhereUniqueInput
}


/**
 * menu deleteMany
 */
export type menuDeleteManyArgs = {
  where?: menuWhereInput
}


/**
 * menu without action
 */
export type menuArgs = {
  /**
   * Select specific fields to fetch from the menu
  **/
  select?: menuSelect | null
  /**
   * Choose, which related nodes to fetch as well.
  **/
  include?: menuInclude | null
}



/**
 * Model search_sentence
 */

export type search_sentence = {
  date_time: Date | null
  id: number
  sentence: string | null
}

export type search_sentenceSelect = {
  date_time?: boolean
  id?: boolean
  sentence?: boolean
}

export type search_sentenceGetPayload<
  S extends boolean | null | undefined | search_sentenceArgs,
  U = keyof S
> = S extends true
  ? search_sentence
  : S extends undefined
  ? never
  : S extends search_sentenceArgs | FindManysearch_sentenceArgs
  ? 'include' extends U
    ? search_sentence 
  : 'select' extends U
    ? {
      [P in TrueKeys<S['select']>]:P extends keyof search_sentence ? search_sentence[P]
: 
 never
    }
  : search_sentence
: search_sentence


export interface search_sentenceDelegate {
  /**
   * Find zero or one Search_sentence.
   * @param {FindOnesearch_sentenceArgs} args - Arguments to find a Search_sentence
   * @example
   * // Get one Search_sentence
   * const search_sentence = await prisma.search_sentence.findOne({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
  **/
  findOne<T extends FindOnesearch_sentenceArgs>(
    args: Subset<T, FindOnesearch_sentenceArgs>
  ): CheckSelect<T, search_sentenceClient<search_sentence | null>, search_sentenceClient<search_sentenceGetPayload<T> | null>>
  /**
   * Find zero or more Search_sentences.
   * @param {FindManysearch_sentenceArgs=} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all Search_sentences
   * const search_sentences = await prisma.search_sentence.findMany()
   * 
   * // Get first 10 Search_sentences
   * const search_sentences = await prisma.search_sentence.findMany({ take: 10 })
   * 
   * // Only select the `date_time`
   * const search_sentenceWithDate_timeOnly = await prisma.search_sentence.findMany({ select: { date_time: true } })
   * 
  **/
  findMany<T extends FindManysearch_sentenceArgs>(
    args?: Subset<T, FindManysearch_sentenceArgs>
  ): CheckSelect<T, Promise<Array<search_sentence>>, Promise<Array<search_sentenceGetPayload<T>>>>
  /**
   * Create a Search_sentence.
   * @param {search_sentenceCreateArgs} args - Arguments to create a Search_sentence.
   * @example
   * // Create one Search_sentence
   * const user = await prisma.search_sentence.create({
   *   data: {
   *     // ... data to create a Search_sentence
   *   }
   * })
   * 
  **/
  create<T extends search_sentenceCreateArgs>(
    args: Subset<T, search_sentenceCreateArgs>
  ): CheckSelect<T, search_sentenceClient<search_sentence>, search_sentenceClient<search_sentenceGetPayload<T>>>
  /**
   * Delete a Search_sentence.
   * @param {search_sentenceDeleteArgs} args - Arguments to delete one Search_sentence.
   * @example
   * // Delete one Search_sentence
   * const user = await prisma.search_sentence.delete({
   *   where: {
   *     // ... filter to delete one Search_sentence
   *   }
   * })
   * 
  **/
  delete<T extends search_sentenceDeleteArgs>(
    args: Subset<T, search_sentenceDeleteArgs>
  ): CheckSelect<T, search_sentenceClient<search_sentence>, search_sentenceClient<search_sentenceGetPayload<T>>>
  /**
   * Update one Search_sentence.
   * @param {search_sentenceUpdateArgs} args - Arguments to update one Search_sentence.
   * @example
   * // Update one Search_sentence
   * const search_sentence = await prisma.search_sentence.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
  **/
  update<T extends search_sentenceUpdateArgs>(
    args: Subset<T, search_sentenceUpdateArgs>
  ): CheckSelect<T, search_sentenceClient<search_sentence>, search_sentenceClient<search_sentenceGetPayload<T>>>
  /**
   * Delete zero or more Search_sentences.
   * @param {search_sentenceDeleteManyArgs} args - Arguments to filter Search_sentences to delete.
   * @example
   * // Delete a few Search_sentences
   * const { count } = await prisma.search_sentence.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
  **/
  deleteMany<T extends search_sentenceDeleteManyArgs>(
    args: Subset<T, search_sentenceDeleteManyArgs>
  ): Promise<BatchPayload>
  /**
   * Update zero or more Search_sentences.
   * @param {search_sentenceUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many Search_sentences
   * const search_sentence = await prisma.search_sentence.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
  **/
  updateMany<T extends search_sentenceUpdateManyArgs>(
    args: Subset<T, search_sentenceUpdateManyArgs>
  ): Promise<BatchPayload>
  /**
   * Create or update one Search_sentence.
   * @param {search_sentenceUpsertArgs} args - Arguments to update or create a Search_sentence.
   * @example
   * // Update or create a Search_sentence
   * const search_sentence = await prisma.search_sentence.upsert({
   *   create: {
   *     // ... data to create a Search_sentence
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the Search_sentence we want to update
   *   }
   * })
  **/
  upsert<T extends search_sentenceUpsertArgs>(
    args: Subset<T, search_sentenceUpsertArgs>
  ): CheckSelect<T, search_sentenceClient<search_sentence>, search_sentenceClient<search_sentenceGetPayload<T>>>
  /**
   * 
   */
  count(args?: Omit<FindManysearch_sentenceArgs, 'select' | 'include'>): Promise<number>
}

export declare class search_sentenceClient<T> implements Promise<T> {
  private readonly _dmmf;
  private readonly _fetcher;
  private readonly _queryType;
  private readonly _rootField;
  private readonly _clientMethod;
  private readonly _args;
  private readonly _dataPath;
  private readonly _errorFormat;
  private readonly _measurePerformance?;
  private _isList;
  private _callsite;
  private _requestPromise?;
  private _collectTimestamps?;
  constructor(_dmmf: DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
  readonly [Symbol.toStringTag]: 'PrismaClientPromise';


  private get _document();
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | Promise<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | Promise<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | Promise<TResult>) | undefined | null): Promise<T | TResult>;
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): Promise<T>;
}

// Custom InputTypes

/**
 * search_sentence findOne
 */
export type FindOnesearch_sentenceArgs = {
  /**
   * Select specific fields to fetch from the search_sentence
  **/
  select?: search_sentenceSelect | null
  /**
   * Filter, which search_sentence to fetch.
  **/
  where: search_sentenceWhereUniqueInput
}


/**
 * search_sentence findMany
 */
export type FindManysearch_sentenceArgs = {
  /**
   * Select specific fields to fetch from the search_sentence
  **/
  select?: search_sentenceSelect | null
  /**
   * Filter, which search_sentences to fetch.
  **/
  where?: search_sentenceWhereInput
  /**
   * Determine the order of the search_sentences to fetch.
  **/
  orderBy?: search_sentenceOrderByInput
  /**
   * Sets the position for listing search_sentences.
  **/
  cursor?: search_sentenceWhereUniqueInput
  /**
   * The number of search_sentences to fetch. If negative number, it will take search_sentences before the `cursor`.
  **/
  take?: number
  /**
   * Skip the first `n` search_sentences.
  **/
  skip?: number
}


/**
 * search_sentence create
 */
export type search_sentenceCreateArgs = {
  /**
   * Select specific fields to fetch from the search_sentence
  **/
  select?: search_sentenceSelect | null
  /**
   * The data needed to create a search_sentence.
  **/
  data: search_sentenceCreateInput
}


/**
 * search_sentence update
 */
export type search_sentenceUpdateArgs = {
  /**
   * Select specific fields to fetch from the search_sentence
  **/
  select?: search_sentenceSelect | null
  /**
   * The data needed to update a search_sentence.
  **/
  data: search_sentenceUpdateInput
  /**
   * Choose, which search_sentence to update.
  **/
  where: search_sentenceWhereUniqueInput
}


/**
 * search_sentence updateMany
 */
export type search_sentenceUpdateManyArgs = {
  data: search_sentenceUpdateManyMutationInput
  where?: search_sentenceWhereInput
}


/**
 * search_sentence upsert
 */
export type search_sentenceUpsertArgs = {
  /**
   * Select specific fields to fetch from the search_sentence
  **/
  select?: search_sentenceSelect | null
  /**
   * The filter to search for the search_sentence to update in case it exists.
  **/
  where: search_sentenceWhereUniqueInput
  /**
   * In case the search_sentence found by the `where` argument doesn't exist, create a new search_sentence with this data.
  **/
  create: search_sentenceCreateInput
  /**
   * In case the search_sentence was found with the provided `where` argument, update it with this data.
  **/
  update: search_sentenceUpdateInput
}


/**
 * search_sentence delete
 */
export type search_sentenceDeleteArgs = {
  /**
   * Select specific fields to fetch from the search_sentence
  **/
  select?: search_sentenceSelect | null
  /**
   * Filter which search_sentence to delete.
  **/
  where: search_sentenceWhereUniqueInput
}


/**
 * search_sentence deleteMany
 */
export type search_sentenceDeleteManyArgs = {
  where?: search_sentenceWhereInput
}


/**
 * search_sentence without action
 */
export type search_sentenceArgs = {
  /**
   * Select specific fields to fetch from the search_sentence
  **/
  select?: search_sentenceSelect | null
}



/**
 * Model shop
 */

export type shop = {
  idshop: number
  shop_addr: string | null
  shop_name: string | null
  shop_order: number | null
  shop_phone: string | null
}

export type shopSelect = {
  idshop?: boolean
  shop_addr?: boolean
  shop_name?: boolean
  shop_order?: boolean
  shop_phone?: boolean
  shop_menu?: boolean | FindManyshop_menuArgs
}

export type shopInclude = {
  shop_menu?: boolean | FindManyshop_menuArgs
}

export type shopGetPayload<
  S extends boolean | null | undefined | shopArgs,
  U = keyof S
> = S extends true
  ? shop
  : S extends undefined
  ? never
  : S extends shopArgs | FindManyshopArgs
  ? 'include' extends U
    ? shop  & {
      [P in TrueKeys<S['include']>]:
      P extends 'shop_menu'
      ? Array<shop_menuGetPayload<S['include'][P]>> : never
    }
  : 'select' extends U
    ? {
      [P in TrueKeys<S['select']>]:P extends keyof shop ? shop[P]
: 
      P extends 'shop_menu'
      ? Array<shop_menuGetPayload<S['select'][P]>> : never
    }
  : shop
: shop


export interface shopDelegate {
  /**
   * Find zero or one Shop.
   * @param {FindOneshopArgs} args - Arguments to find a Shop
   * @example
   * // Get one Shop
   * const shop = await prisma.shop.findOne({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
  **/
  findOne<T extends FindOneshopArgs>(
    args: Subset<T, FindOneshopArgs>
  ): CheckSelect<T, shopClient<shop | null>, shopClient<shopGetPayload<T> | null>>
  /**
   * Find zero or more Shops.
   * @param {FindManyshopArgs=} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all Shops
   * const shops = await prisma.shop.findMany()
   * 
   * // Get first 10 Shops
   * const shops = await prisma.shop.findMany({ take: 10 })
   * 
   * // Only select the `idshop`
   * const shopWithIdshopOnly = await prisma.shop.findMany({ select: { idshop: true } })
   * 
  **/
  findMany<T extends FindManyshopArgs>(
    args?: Subset<T, FindManyshopArgs>
  ): CheckSelect<T, Promise<Array<shop>>, Promise<Array<shopGetPayload<T>>>>
  /**
   * Create a Shop.
   * @param {shopCreateArgs} args - Arguments to create a Shop.
   * @example
   * // Create one Shop
   * const user = await prisma.shop.create({
   *   data: {
   *     // ... data to create a Shop
   *   }
   * })
   * 
  **/
  create<T extends shopCreateArgs>(
    args: Subset<T, shopCreateArgs>
  ): CheckSelect<T, shopClient<shop>, shopClient<shopGetPayload<T>>>
  /**
   * Delete a Shop.
   * @param {shopDeleteArgs} args - Arguments to delete one Shop.
   * @example
   * // Delete one Shop
   * const user = await prisma.shop.delete({
   *   where: {
   *     // ... filter to delete one Shop
   *   }
   * })
   * 
  **/
  delete<T extends shopDeleteArgs>(
    args: Subset<T, shopDeleteArgs>
  ): CheckSelect<T, shopClient<shop>, shopClient<shopGetPayload<T>>>
  /**
   * Update one Shop.
   * @param {shopUpdateArgs} args - Arguments to update one Shop.
   * @example
   * // Update one Shop
   * const shop = await prisma.shop.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
  **/
  update<T extends shopUpdateArgs>(
    args: Subset<T, shopUpdateArgs>
  ): CheckSelect<T, shopClient<shop>, shopClient<shopGetPayload<T>>>
  /**
   * Delete zero or more Shops.
   * @param {shopDeleteManyArgs} args - Arguments to filter Shops to delete.
   * @example
   * // Delete a few Shops
   * const { count } = await prisma.shop.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
  **/
  deleteMany<T extends shopDeleteManyArgs>(
    args: Subset<T, shopDeleteManyArgs>
  ): Promise<BatchPayload>
  /**
   * Update zero or more Shops.
   * @param {shopUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many Shops
   * const shop = await prisma.shop.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
  **/
  updateMany<T extends shopUpdateManyArgs>(
    args: Subset<T, shopUpdateManyArgs>
  ): Promise<BatchPayload>
  /**
   * Create or update one Shop.
   * @param {shopUpsertArgs} args - Arguments to update or create a Shop.
   * @example
   * // Update or create a Shop
   * const shop = await prisma.shop.upsert({
   *   create: {
   *     // ... data to create a Shop
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the Shop we want to update
   *   }
   * })
  **/
  upsert<T extends shopUpsertArgs>(
    args: Subset<T, shopUpsertArgs>
  ): CheckSelect<T, shopClient<shop>, shopClient<shopGetPayload<T>>>
  /**
   * 
   */
  count(args?: Omit<FindManyshopArgs, 'select' | 'include'>): Promise<number>
}

export declare class shopClient<T> implements Promise<T> {
  private readonly _dmmf;
  private readonly _fetcher;
  private readonly _queryType;
  private readonly _rootField;
  private readonly _clientMethod;
  private readonly _args;
  private readonly _dataPath;
  private readonly _errorFormat;
  private readonly _measurePerformance?;
  private _isList;
  private _callsite;
  private _requestPromise?;
  private _collectTimestamps?;
  constructor(_dmmf: DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
  readonly [Symbol.toStringTag]: 'PrismaClientPromise';

  shop_menu<T extends FindManyshop_menuArgs = {}>(args?: Subset<T, FindManyshop_menuArgs>): CheckSelect<T, Promise<Array<shop_menu>>, Promise<Array<shop_menuGetPayload<T>>>>;

  private get _document();
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | Promise<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | Promise<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | Promise<TResult>) | undefined | null): Promise<T | TResult>;
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): Promise<T>;
}

// Custom InputTypes

/**
 * shop findOne
 */
export type FindOneshopArgs = {
  /**
   * Select specific fields to fetch from the shop
  **/
  select?: shopSelect | null
  /**
   * Choose, which related nodes to fetch as well.
  **/
  include?: shopInclude | null
  /**
   * Filter, which shop to fetch.
  **/
  where: shopWhereUniqueInput
}


/**
 * shop findMany
 */
export type FindManyshopArgs = {
  /**
   * Select specific fields to fetch from the shop
  **/
  select?: shopSelect | null
  /**
   * Choose, which related nodes to fetch as well.
  **/
  include?: shopInclude | null
  /**
   * Filter, which shops to fetch.
  **/
  where?: shopWhereInput
  /**
   * Determine the order of the shops to fetch.
  **/
  orderBy?: shopOrderByInput
  /**
   * Sets the position for listing shops.
  **/
  cursor?: shopWhereUniqueInput
  /**
   * The number of shops to fetch. If negative number, it will take shops before the `cursor`.
  **/
  take?: number
  /**
   * Skip the first `n` shops.
  **/
  skip?: number
}


/**
 * shop create
 */
export type shopCreateArgs = {
  /**
   * Select specific fields to fetch from the shop
  **/
  select?: shopSelect | null
  /**
   * Choose, which related nodes to fetch as well.
  **/
  include?: shopInclude | null
  /**
   * The data needed to create a shop.
  **/
  data: shopCreateInput
}


/**
 * shop update
 */
export type shopUpdateArgs = {
  /**
   * Select specific fields to fetch from the shop
  **/
  select?: shopSelect | null
  /**
   * Choose, which related nodes to fetch as well.
  **/
  include?: shopInclude | null
  /**
   * The data needed to update a shop.
  **/
  data: shopUpdateInput
  /**
   * Choose, which shop to update.
  **/
  where: shopWhereUniqueInput
}


/**
 * shop updateMany
 */
export type shopUpdateManyArgs = {
  data: shopUpdateManyMutationInput
  where?: shopWhereInput
}


/**
 * shop upsert
 */
export type shopUpsertArgs = {
  /**
   * Select specific fields to fetch from the shop
  **/
  select?: shopSelect | null
  /**
   * Choose, which related nodes to fetch as well.
  **/
  include?: shopInclude | null
  /**
   * The filter to search for the shop to update in case it exists.
  **/
  where: shopWhereUniqueInput
  /**
   * In case the shop found by the `where` argument doesn't exist, create a new shop with this data.
  **/
  create: shopCreateInput
  /**
   * In case the shop was found with the provided `where` argument, update it with this data.
  **/
  update: shopUpdateInput
}


/**
 * shop delete
 */
export type shopDeleteArgs = {
  /**
   * Select specific fields to fetch from the shop
  **/
  select?: shopSelect | null
  /**
   * Choose, which related nodes to fetch as well.
  **/
  include?: shopInclude | null
  /**
   * Filter which shop to delete.
  **/
  where: shopWhereUniqueInput
}


/**
 * shop deleteMany
 */
export type shopDeleteManyArgs = {
  where?: shopWhereInput
}


/**
 * shop without action
 */
export type shopArgs = {
  /**
   * Select specific fields to fetch from the shop
  **/
  select?: shopSelect | null
  /**
   * Choose, which related nodes to fetch as well.
  **/
  include?: shopInclude | null
}



/**
 * Model shop_menu
 */

export type shop_menu = {
  id: number
  menu_id: number
  shop_id: number
}

export type shop_menuSelect = {
  id?: boolean
  menu_id?: boolean
  shop_id?: boolean
  menu?: boolean | menuArgs
  shop?: boolean | shopArgs
}

export type shop_menuInclude = {
  menu?: boolean | menuArgs
  shop?: boolean | shopArgs
}

export type shop_menuGetPayload<
  S extends boolean | null | undefined | shop_menuArgs,
  U = keyof S
> = S extends true
  ? shop_menu
  : S extends undefined
  ? never
  : S extends shop_menuArgs | FindManyshop_menuArgs
  ? 'include' extends U
    ? shop_menu  & {
      [P in TrueKeys<S['include']>]:
      P extends 'menu'
      ? menuGetPayload<S['include'][P]> :
      P extends 'shop'
      ? shopGetPayload<S['include'][P]> : never
    }
  : 'select' extends U
    ? {
      [P in TrueKeys<S['select']>]:P extends keyof shop_menu ? shop_menu[P]
: 
      P extends 'menu'
      ? menuGetPayload<S['select'][P]> :
      P extends 'shop'
      ? shopGetPayload<S['select'][P]> : never
    }
  : shop_menu
: shop_menu


export interface shop_menuDelegate {
  /**
   * Find zero or one Shop_menu.
   * @param {FindOneshop_menuArgs} args - Arguments to find a Shop_menu
   * @example
   * // Get one Shop_menu
   * const shop_menu = await prisma.shop_menu.findOne({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
  **/
  findOne<T extends FindOneshop_menuArgs>(
    args: Subset<T, FindOneshop_menuArgs>
  ): CheckSelect<T, shop_menuClient<shop_menu | null>, shop_menuClient<shop_menuGetPayload<T> | null>>
  /**
   * Find zero or more Shop_menus.
   * @param {FindManyshop_menuArgs=} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all Shop_menus
   * const shop_menus = await prisma.shop_menu.findMany()
   * 
   * // Get first 10 Shop_menus
   * const shop_menus = await prisma.shop_menu.findMany({ take: 10 })
   * 
   * // Only select the `id`
   * const shop_menuWithIdOnly = await prisma.shop_menu.findMany({ select: { id: true } })
   * 
  **/
  findMany<T extends FindManyshop_menuArgs>(
    args?: Subset<T, FindManyshop_menuArgs>
  ): CheckSelect<T, Promise<Array<shop_menu>>, Promise<Array<shop_menuGetPayload<T>>>>
  /**
   * Create a Shop_menu.
   * @param {shop_menuCreateArgs} args - Arguments to create a Shop_menu.
   * @example
   * // Create one Shop_menu
   * const user = await prisma.shop_menu.create({
   *   data: {
   *     // ... data to create a Shop_menu
   *   }
   * })
   * 
  **/
  create<T extends shop_menuCreateArgs>(
    args: Subset<T, shop_menuCreateArgs>
  ): CheckSelect<T, shop_menuClient<shop_menu>, shop_menuClient<shop_menuGetPayload<T>>>
  /**
   * Delete a Shop_menu.
   * @param {shop_menuDeleteArgs} args - Arguments to delete one Shop_menu.
   * @example
   * // Delete one Shop_menu
   * const user = await prisma.shop_menu.delete({
   *   where: {
   *     // ... filter to delete one Shop_menu
   *   }
   * })
   * 
  **/
  delete<T extends shop_menuDeleteArgs>(
    args: Subset<T, shop_menuDeleteArgs>
  ): CheckSelect<T, shop_menuClient<shop_menu>, shop_menuClient<shop_menuGetPayload<T>>>
  /**
   * Update one Shop_menu.
   * @param {shop_menuUpdateArgs} args - Arguments to update one Shop_menu.
   * @example
   * // Update one Shop_menu
   * const shop_menu = await prisma.shop_menu.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
  **/
  update<T extends shop_menuUpdateArgs>(
    args: Subset<T, shop_menuUpdateArgs>
  ): CheckSelect<T, shop_menuClient<shop_menu>, shop_menuClient<shop_menuGetPayload<T>>>
  /**
   * Delete zero or more Shop_menus.
   * @param {shop_menuDeleteManyArgs} args - Arguments to filter Shop_menus to delete.
   * @example
   * // Delete a few Shop_menus
   * const { count } = await prisma.shop_menu.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
  **/
  deleteMany<T extends shop_menuDeleteManyArgs>(
    args: Subset<T, shop_menuDeleteManyArgs>
  ): Promise<BatchPayload>
  /**
   * Update zero or more Shop_menus.
   * @param {shop_menuUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many Shop_menus
   * const shop_menu = await prisma.shop_menu.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
  **/
  updateMany<T extends shop_menuUpdateManyArgs>(
    args: Subset<T, shop_menuUpdateManyArgs>
  ): Promise<BatchPayload>
  /**
   * Create or update one Shop_menu.
   * @param {shop_menuUpsertArgs} args - Arguments to update or create a Shop_menu.
   * @example
   * // Update or create a Shop_menu
   * const shop_menu = await prisma.shop_menu.upsert({
   *   create: {
   *     // ... data to create a Shop_menu
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the Shop_menu we want to update
   *   }
   * })
  **/
  upsert<T extends shop_menuUpsertArgs>(
    args: Subset<T, shop_menuUpsertArgs>
  ): CheckSelect<T, shop_menuClient<shop_menu>, shop_menuClient<shop_menuGetPayload<T>>>
  /**
   * 
   */
  count(args?: Omit<FindManyshop_menuArgs, 'select' | 'include'>): Promise<number>
}

export declare class shop_menuClient<T> implements Promise<T> {
  private readonly _dmmf;
  private readonly _fetcher;
  private readonly _queryType;
  private readonly _rootField;
  private readonly _clientMethod;
  private readonly _args;
  private readonly _dataPath;
  private readonly _errorFormat;
  private readonly _measurePerformance?;
  private _isList;
  private _callsite;
  private _requestPromise?;
  private _collectTimestamps?;
  constructor(_dmmf: DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
  readonly [Symbol.toStringTag]: 'PrismaClientPromise';

  menu<T extends menuArgs = {}>(args?: Subset<T, menuArgs>): CheckSelect<T, menuClient<menu | null>, menuClient<menuGetPayload<T> | null>>;

  shop<T extends shopArgs = {}>(args?: Subset<T, shopArgs>): CheckSelect<T, shopClient<shop | null>, shopClient<shopGetPayload<T> | null>>;

  private get _document();
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | Promise<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | Promise<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | Promise<TResult>) | undefined | null): Promise<T | TResult>;
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): Promise<T>;
}

// Custom InputTypes

/**
 * shop_menu findOne
 */
export type FindOneshop_menuArgs = {
  /**
   * Select specific fields to fetch from the shop_menu
  **/
  select?: shop_menuSelect | null
  /**
   * Choose, which related nodes to fetch as well.
  **/
  include?: shop_menuInclude | null
  /**
   * Filter, which shop_menu to fetch.
  **/
  where: shop_menuWhereUniqueInput
}


/**
 * shop_menu findMany
 */
export type FindManyshop_menuArgs = {
  /**
   * Select specific fields to fetch from the shop_menu
  **/
  select?: shop_menuSelect | null
  /**
   * Choose, which related nodes to fetch as well.
  **/
  include?: shop_menuInclude | null
  /**
   * Filter, which shop_menus to fetch.
  **/
  where?: shop_menuWhereInput
  /**
   * Determine the order of the shop_menus to fetch.
  **/
  orderBy?: shop_menuOrderByInput
  /**
   * Sets the position for listing shop_menus.
  **/
  cursor?: shop_menuWhereUniqueInput
  /**
   * The number of shop_menus to fetch. If negative number, it will take shop_menus before the `cursor`.
  **/
  take?: number
  /**
   * Skip the first `n` shop_menus.
  **/
  skip?: number
}


/**
 * shop_menu create
 */
export type shop_menuCreateArgs = {
  /**
   * Select specific fields to fetch from the shop_menu
  **/
  select?: shop_menuSelect | null
  /**
   * Choose, which related nodes to fetch as well.
  **/
  include?: shop_menuInclude | null
  /**
   * The data needed to create a shop_menu.
  **/
  data: shop_menuCreateInput
}


/**
 * shop_menu update
 */
export type shop_menuUpdateArgs = {
  /**
   * Select specific fields to fetch from the shop_menu
  **/
  select?: shop_menuSelect | null
  /**
   * Choose, which related nodes to fetch as well.
  **/
  include?: shop_menuInclude | null
  /**
   * The data needed to update a shop_menu.
  **/
  data: shop_menuUpdateInput
  /**
   * Choose, which shop_menu to update.
  **/
  where: shop_menuWhereUniqueInput
}


/**
 * shop_menu updateMany
 */
export type shop_menuUpdateManyArgs = {
  data: shop_menuUpdateManyMutationInput
  where?: shop_menuWhereInput
}


/**
 * shop_menu upsert
 */
export type shop_menuUpsertArgs = {
  /**
   * Select specific fields to fetch from the shop_menu
  **/
  select?: shop_menuSelect | null
  /**
   * Choose, which related nodes to fetch as well.
  **/
  include?: shop_menuInclude | null
  /**
   * The filter to search for the shop_menu to update in case it exists.
  **/
  where: shop_menuWhereUniqueInput
  /**
   * In case the shop_menu found by the `where` argument doesn't exist, create a new shop_menu with this data.
  **/
  create: shop_menuCreateInput
  /**
   * In case the shop_menu was found with the provided `where` argument, update it with this data.
  **/
  update: shop_menuUpdateInput
}


/**
 * shop_menu delete
 */
export type shop_menuDeleteArgs = {
  /**
   * Select specific fields to fetch from the shop_menu
  **/
  select?: shop_menuSelect | null
  /**
   * Choose, which related nodes to fetch as well.
  **/
  include?: shop_menuInclude | null
  /**
   * Filter which shop_menu to delete.
  **/
  where: shop_menuWhereUniqueInput
}


/**
 * shop_menu deleteMany
 */
export type shop_menuDeleteManyArgs = {
  where?: shop_menuWhereInput
}


/**
 * shop_menu without action
 */
export type shop_menuArgs = {
  /**
   * Select specific fields to fetch from the shop_menu
  **/
  select?: shop_menuSelect | null
  /**
   * Choose, which related nodes to fetch as well.
  **/
  include?: shop_menuInclude | null
}



/**
 * Model User
 */

export type User = {
  id: number
  password: string | null
  username: string | null
}

export type UserSelect = {
  id?: boolean
  password?: boolean
  username?: boolean
}

export type UserGetPayload<
  S extends boolean | null | undefined | UserArgs,
  U = keyof S
> = S extends true
  ? User
  : S extends undefined
  ? never
  : S extends UserArgs | FindManyUserArgs
  ? 'include' extends U
    ? User 
  : 'select' extends U
    ? {
      [P in TrueKeys<S['select']>]:P extends keyof User ? User[P]
: 
 never
    }
  : User
: User


export interface UserDelegate {
  /**
   * Find zero or one User.
   * @param {FindOneUserArgs} args - Arguments to find a User
   * @example
   * // Get one User
   * const user = await prisma.user.findOne({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
  **/
  findOne<T extends FindOneUserArgs>(
    args: Subset<T, FindOneUserArgs>
  ): CheckSelect<T, UserClient<User | null>, UserClient<UserGetPayload<T> | null>>
  /**
   * Find zero or more Users.
   * @param {FindManyUserArgs=} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all Users
   * const users = await prisma.user.findMany()
   * 
   * // Get first 10 Users
   * const users = await prisma.user.findMany({ take: 10 })
   * 
   * // Only select the `id`
   * const userWithIdOnly = await prisma.user.findMany({ select: { id: true } })
   * 
  **/
  findMany<T extends FindManyUserArgs>(
    args?: Subset<T, FindManyUserArgs>
  ): CheckSelect<T, Promise<Array<User>>, Promise<Array<UserGetPayload<T>>>>
  /**
   * Create a User.
   * @param {UserCreateArgs} args - Arguments to create a User.
   * @example
   * // Create one User
   * const user = await prisma.user.create({
   *   data: {
   *     // ... data to create a User
   *   }
   * })
   * 
  **/
  create<T extends UserCreateArgs>(
    args: Subset<T, UserCreateArgs>
  ): CheckSelect<T, UserClient<User>, UserClient<UserGetPayload<T>>>
  /**
   * Delete a User.
   * @param {UserDeleteArgs} args - Arguments to delete one User.
   * @example
   * // Delete one User
   * const user = await prisma.user.delete({
   *   where: {
   *     // ... filter to delete one User
   *   }
   * })
   * 
  **/
  delete<T extends UserDeleteArgs>(
    args: Subset<T, UserDeleteArgs>
  ): CheckSelect<T, UserClient<User>, UserClient<UserGetPayload<T>>>
  /**
   * Update one User.
   * @param {UserUpdateArgs} args - Arguments to update one User.
   * @example
   * // Update one User
   * const user = await prisma.user.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
  **/
  update<T extends UserUpdateArgs>(
    args: Subset<T, UserUpdateArgs>
  ): CheckSelect<T, UserClient<User>, UserClient<UserGetPayload<T>>>
  /**
   * Delete zero or more Users.
   * @param {UserDeleteManyArgs} args - Arguments to filter Users to delete.
   * @example
   * // Delete a few Users
   * const { count } = await prisma.user.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
  **/
  deleteMany<T extends UserDeleteManyArgs>(
    args: Subset<T, UserDeleteManyArgs>
  ): Promise<BatchPayload>
  /**
   * Update zero or more Users.
   * @param {UserUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many Users
   * const user = await prisma.user.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
  **/
  updateMany<T extends UserUpdateManyArgs>(
    args: Subset<T, UserUpdateManyArgs>
  ): Promise<BatchPayload>
  /**
   * Create or update one User.
   * @param {UserUpsertArgs} args - Arguments to update or create a User.
   * @example
   * // Update or create a User
   * const user = await prisma.user.upsert({
   *   create: {
   *     // ... data to create a User
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the User we want to update
   *   }
   * })
  **/
  upsert<T extends UserUpsertArgs>(
    args: Subset<T, UserUpsertArgs>
  ): CheckSelect<T, UserClient<User>, UserClient<UserGetPayload<T>>>
  /**
   * 
   */
  count(args?: Omit<FindManyUserArgs, 'select' | 'include'>): Promise<number>
}

export declare class UserClient<T> implements Promise<T> {
  private readonly _dmmf;
  private readonly _fetcher;
  private readonly _queryType;
  private readonly _rootField;
  private readonly _clientMethod;
  private readonly _args;
  private readonly _dataPath;
  private readonly _errorFormat;
  private readonly _measurePerformance?;
  private _isList;
  private _callsite;
  private _requestPromise?;
  private _collectTimestamps?;
  constructor(_dmmf: DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
  readonly [Symbol.toStringTag]: 'PrismaClientPromise';


  private get _document();
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | Promise<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | Promise<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | Promise<TResult>) | undefined | null): Promise<T | TResult>;
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): Promise<T>;
}

// Custom InputTypes

/**
 * User findOne
 */
export type FindOneUserArgs = {
  /**
   * Select specific fields to fetch from the User
  **/
  select?: UserSelect | null
  /**
   * Filter, which User to fetch.
  **/
  where: UserWhereUniqueInput
}


/**
 * User findMany
 */
export type FindManyUserArgs = {
  /**
   * Select specific fields to fetch from the User
  **/
  select?: UserSelect | null
  /**
   * Filter, which Users to fetch.
  **/
  where?: UserWhereInput
  /**
   * Determine the order of the Users to fetch.
  **/
  orderBy?: UserOrderByInput
  /**
   * Sets the position for listing Users.
  **/
  cursor?: UserWhereUniqueInput
  /**
   * The number of Users to fetch. If negative number, it will take Users before the `cursor`.
  **/
  take?: number
  /**
   * Skip the first `n` Users.
  **/
  skip?: number
}


/**
 * User create
 */
export type UserCreateArgs = {
  /**
   * Select specific fields to fetch from the User
  **/
  select?: UserSelect | null
  /**
   * The data needed to create a User.
  **/
  data: UserCreateInput
}


/**
 * User update
 */
export type UserUpdateArgs = {
  /**
   * Select specific fields to fetch from the User
  **/
  select?: UserSelect | null
  /**
   * The data needed to update a User.
  **/
  data: UserUpdateInput
  /**
   * Choose, which User to update.
  **/
  where: UserWhereUniqueInput
}


/**
 * User updateMany
 */
export type UserUpdateManyArgs = {
  data: UserUpdateManyMutationInput
  where?: UserWhereInput
}


/**
 * User upsert
 */
export type UserUpsertArgs = {
  /**
   * Select specific fields to fetch from the User
  **/
  select?: UserSelect | null
  /**
   * The filter to search for the User to update in case it exists.
  **/
  where: UserWhereUniqueInput
  /**
   * In case the User found by the `where` argument doesn't exist, create a new User with this data.
  **/
  create: UserCreateInput
  /**
   * In case the User was found with the provided `where` argument, update it with this data.
  **/
  update: UserUpdateInput
}


/**
 * User delete
 */
export type UserDeleteArgs = {
  /**
   * Select specific fields to fetch from the User
  **/
  select?: UserSelect | null
  /**
   * Filter which User to delete.
  **/
  where: UserWhereUniqueInput
}


/**
 * User deleteMany
 */
export type UserDeleteManyArgs = {
  where?: UserWhereInput
}


/**
 * User without action
 */
export type UserArgs = {
  /**
   * Select specific fields to fetch from the User
  **/
  select?: UserSelect | null
}



/**
 * Deep Input Types
 */


export type shopWhereInput = {
  idshop?: number | IntFilter
  shop_addr?: string | NullableStringFilter | null
  shop_name?: string | NullableStringFilter | null
  shop_order?: number | NullableIntFilter | null
  shop_phone?: string | NullableStringFilter | null
  shop_menu?: shop_menuFilter | null
  AND?: Enumerable<shopWhereInput>
  OR?: Array<shopWhereInput>
  NOT?: Enumerable<shopWhereInput>
}

export type shop_menuWhereInput = {
  id?: number | IntFilter
  menu_id?: number | IntFilter
  shop_id?: number | IntFilter
  AND?: Enumerable<shop_menuWhereInput>
  OR?: Array<shop_menuWhereInput>
  NOT?: Enumerable<shop_menuWhereInput>
  menu?: menuWhereInput | null
  shop?: shopWhereInput | null
}

export type menuWhereInput = {
  idmenu?: number | IntFilter
  menu_name?: string | StringFilter
  shop_menu?: shop_menuFilter | null
  AND?: Enumerable<menuWhereInput>
  OR?: Array<menuWhereInput>
  NOT?: Enumerable<menuWhereInput>
}

export type menuWhereUniqueInput = {
  idmenu?: number
}

export type shop_menuWhereUniqueInput = {
  id?: number
  menu_id?: number
  shop_id?: number
}

export type search_sentenceWhereInput = {
  date_time?: Date | string | NullableDateTimeFilter | null
  id?: number | IntFilter
  sentence?: string | NullableStringFilter | null
  AND?: Enumerable<search_sentenceWhereInput>
  OR?: Array<search_sentenceWhereInput>
  NOT?: Enumerable<search_sentenceWhereInput>
}

export type search_sentenceWhereUniqueInput = {
  id?: number
}

export type shopWhereUniqueInput = {
  idshop?: number
}

export type UserWhereInput = {
  id?: number | IntFilter
  password?: string | NullableStringFilter | null
  username?: string | NullableStringFilter | null
  AND?: Enumerable<UserWhereInput>
  OR?: Array<UserWhereInput>
  NOT?: Enumerable<UserWhereInput>
}

export type UserWhereUniqueInput = {
  id?: number
}

export type shopCreateWithoutShop_menuInput = {
  shop_addr?: string | null
  shop_name?: string | null
  shop_order?: number | null
  shop_phone?: string | null
}

export type shopCreateOneWithoutShop_menuInput = {
  create?: shopCreateWithoutShop_menuInput
  connect?: shopWhereUniqueInput
}

export type shop_menuCreateWithoutMenuInput = {
  shop: shopCreateOneWithoutShop_menuInput
}

export type shop_menuCreateManyWithoutMenuInput = {
  create?: Enumerable<shop_menuCreateWithoutMenuInput>
  connect?: Enumerable<shop_menuWhereUniqueInput>
}

export type menuCreateInput = {
  menu_name?: string
  shop_menu?: shop_menuCreateManyWithoutMenuInput | null
}

export type shopUpdateWithoutShop_menuDataInput = {
  idshop?: number
  shop_addr?: string | null
  shop_name?: string | null
  shop_order?: number | null
  shop_phone?: string | null
}

export type shopUpsertWithoutShop_menuInput = {
  update: shopUpdateWithoutShop_menuDataInput
  create: shopCreateWithoutShop_menuInput
}

export type shopUpdateOneRequiredWithoutShop_menuInput = {
  create?: shopCreateWithoutShop_menuInput
  connect?: shopWhereUniqueInput
  update?: shopUpdateWithoutShop_menuDataInput
  upsert?: shopUpsertWithoutShop_menuInput
}

export type shop_menuUpdateWithoutMenuDataInput = {
  id?: number
  shop?: shopUpdateOneRequiredWithoutShop_menuInput
}

export type shop_menuUpdateWithWhereUniqueWithoutMenuInput = {
  where: shop_menuWhereUniqueInput
  data: shop_menuUpdateWithoutMenuDataInput
}

export type shop_menuScalarWhereInput = {
  id?: number | IntFilter
  menu_id?: number | IntFilter
  shop_id?: number | IntFilter
  AND?: Enumerable<shop_menuScalarWhereInput>
  OR?: Array<shop_menuScalarWhereInput>
  NOT?: Enumerable<shop_menuScalarWhereInput>
}

export type shop_menuUpdateManyDataInput = {
  id?: number
}

export type shop_menuUpdateManyWithWhereNestedInput = {
  where: shop_menuScalarWhereInput
  data: shop_menuUpdateManyDataInput
}

export type shop_menuUpsertWithWhereUniqueWithoutMenuInput = {
  where: shop_menuWhereUniqueInput
  update: shop_menuUpdateWithoutMenuDataInput
  create: shop_menuCreateWithoutMenuInput
}

export type shop_menuUpdateManyWithoutMenuInput = {
  create?: Enumerable<shop_menuCreateWithoutMenuInput>
  connect?: Enumerable<shop_menuWhereUniqueInput>
  set?: Enumerable<shop_menuWhereUniqueInput>
  disconnect?: Enumerable<shop_menuWhereUniqueInput>
  delete?: Enumerable<shop_menuWhereUniqueInput>
  update?: Enumerable<shop_menuUpdateWithWhereUniqueWithoutMenuInput>
  updateMany?: Enumerable<shop_menuUpdateManyWithWhereNestedInput>
  deleteMany?: Enumerable<shop_menuScalarWhereInput>
  upsert?: Enumerable<shop_menuUpsertWithWhereUniqueWithoutMenuInput>
}

export type menuUpdateInput = {
  idmenu?: number
  menu_name?: string
  shop_menu?: shop_menuUpdateManyWithoutMenuInput
}

export type menuUpdateManyMutationInput = {
  idmenu?: number
  menu_name?: string
}

export type search_sentenceCreateInput = {
  date_time?: Date | string | null
  sentence?: string | null
}

export type search_sentenceUpdateInput = {
  date_time?: Date | string | null
  id?: number
  sentence?: string | null
}

export type search_sentenceUpdateManyMutationInput = {
  date_time?: Date | string | null
  id?: number
  sentence?: string | null
}

export type menuCreateWithoutShop_menuInput = {
  menu_name?: string
}

export type menuCreateOneWithoutShop_menuInput = {
  create?: menuCreateWithoutShop_menuInput
  connect?: menuWhereUniqueInput
}

export type shop_menuCreateWithoutShopInput = {
  menu: menuCreateOneWithoutShop_menuInput
}

export type shop_menuCreateManyWithoutShopInput = {
  create?: Enumerable<shop_menuCreateWithoutShopInput>
  connect?: Enumerable<shop_menuWhereUniqueInput>
}

export type shopCreateInput = {
  shop_addr?: string | null
  shop_name?: string | null
  shop_order?: number | null
  shop_phone?: string | null
  shop_menu?: shop_menuCreateManyWithoutShopInput | null
}

export type menuUpdateWithoutShop_menuDataInput = {
  idmenu?: number
  menu_name?: string
}

export type menuUpsertWithoutShop_menuInput = {
  update: menuUpdateWithoutShop_menuDataInput
  create: menuCreateWithoutShop_menuInput
}

export type menuUpdateOneRequiredWithoutShop_menuInput = {
  create?: menuCreateWithoutShop_menuInput
  connect?: menuWhereUniqueInput
  update?: menuUpdateWithoutShop_menuDataInput
  upsert?: menuUpsertWithoutShop_menuInput
}

export type shop_menuUpdateWithoutShopDataInput = {
  id?: number
  menu?: menuUpdateOneRequiredWithoutShop_menuInput
}

export type shop_menuUpdateWithWhereUniqueWithoutShopInput = {
  where: shop_menuWhereUniqueInput
  data: shop_menuUpdateWithoutShopDataInput
}

export type shop_menuUpsertWithWhereUniqueWithoutShopInput = {
  where: shop_menuWhereUniqueInput
  update: shop_menuUpdateWithoutShopDataInput
  create: shop_menuCreateWithoutShopInput
}

export type shop_menuUpdateManyWithoutShopInput = {
  create?: Enumerable<shop_menuCreateWithoutShopInput>
  connect?: Enumerable<shop_menuWhereUniqueInput>
  set?: Enumerable<shop_menuWhereUniqueInput>
  disconnect?: Enumerable<shop_menuWhereUniqueInput>
  delete?: Enumerable<shop_menuWhereUniqueInput>
  update?: Enumerable<shop_menuUpdateWithWhereUniqueWithoutShopInput>
  updateMany?: Enumerable<shop_menuUpdateManyWithWhereNestedInput>
  deleteMany?: Enumerable<shop_menuScalarWhereInput>
  upsert?: Enumerable<shop_menuUpsertWithWhereUniqueWithoutShopInput>
}

export type shopUpdateInput = {
  idshop?: number
  shop_addr?: string | null
  shop_name?: string | null
  shop_order?: number | null
  shop_phone?: string | null
  shop_menu?: shop_menuUpdateManyWithoutShopInput
}

export type shopUpdateManyMutationInput = {
  idshop?: number
  shop_addr?: string | null
  shop_name?: string | null
  shop_order?: number | null
  shop_phone?: string | null
}

export type shop_menuCreateInput = {
  menu: menuCreateOneWithoutShop_menuInput
  shop: shopCreateOneWithoutShop_menuInput
}

export type shop_menuUpdateInput = {
  id?: number
  menu?: menuUpdateOneRequiredWithoutShop_menuInput
  shop?: shopUpdateOneRequiredWithoutShop_menuInput
}

export type shop_menuUpdateManyMutationInput = {
  id?: number
}

export type UserCreateInput = {
  password?: string | null
  username?: string | null
}

export type UserUpdateInput = {
  id?: number
  password?: string | null
  username?: string | null
}

export type UserUpdateManyMutationInput = {
  id?: number
  password?: string | null
  username?: string | null
}

export type IntFilter = {
  equals?: number
  not?: number | IntFilter
  in?: Enumerable<number>
  notIn?: Enumerable<number>
  lt?: number
  lte?: number
  gt?: number
  gte?: number
}

export type NullableStringFilter = {
  equals?: string | null
  not?: string | null | NullableStringFilter
  in?: Enumerable<string> | null
  notIn?: Enumerable<string> | null
  lt?: string | null
  lte?: string | null
  gt?: string | null
  gte?: string | null
  contains?: string | null
  startsWith?: string | null
  endsWith?: string | null
}

export type NullableIntFilter = {
  equals?: number | null
  not?: number | null | NullableIntFilter
  in?: Enumerable<number> | null
  notIn?: Enumerable<number> | null
  lt?: number | null
  lte?: number | null
  gt?: number | null
  gte?: number | null
}

export type shop_menuFilter = {
  every?: shop_menuWhereInput
  some?: shop_menuWhereInput
  none?: shop_menuWhereInput
}

export type StringFilter = {
  equals?: string
  not?: string | StringFilter
  in?: Enumerable<string>
  notIn?: Enumerable<string>
  lt?: string
  lte?: string
  gt?: string
  gte?: string
  contains?: string
  startsWith?: string
  endsWith?: string
}

export type NullableDateTimeFilter = {
  equals?: Date | string | null
  not?: Date | string | null | NullableDateTimeFilter
  in?: Enumerable<Date | string> | null
  notIn?: Enumerable<Date | string> | null
  lt?: Date | string | null
  lte?: Date | string | null
  gt?: Date | string | null
  gte?: Date | string | null
}

export type menuOrderByInput = {
  idmenu?: OrderByArg | null
  menu_name?: OrderByArg | null
}

export type shop_menuOrderByInput = {
  id?: OrderByArg | null
  menu_id?: OrderByArg | null
  shop_id?: OrderByArg | null
}

export type search_sentenceOrderByInput = {
  date_time?: OrderByArg | null
  id?: OrderByArg | null
  sentence?: OrderByArg | null
}

export type shopOrderByInput = {
  idshop?: OrderByArg | null
  shop_addr?: OrderByArg | null
  shop_name?: OrderByArg | null
  shop_order?: OrderByArg | null
  shop_phone?: OrderByArg | null
}

export type UserOrderByInput = {
  id?: OrderByArg | null
  password?: OrderByArg | null
  username?: OrderByArg | null
}

/**
 * Batch Payload for updateMany & deleteMany
 */

export type BatchPayload = {
  count: number
}

/**
 * DMMF
 */
export declare const dmmf: DMMF.Document;
export {};
